@{ Layout = "_Root"; }
@{ //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }

    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    } 
}
@await RenderSectionAsync("Breadcrumb", false)
<div class="container-fluid container-lg">
    <div class="row">
        <div class="col-md-4 col-lg-3 d-none d-md-block">
            <div class="side-2 bg-white accordion" id="sidebar">
                @if (IsSectionDefined("left")) 
                { 
                    @RenderSection("left") 
                }
                else
                {
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
                    @await RenderSectionAsync("CatalogFilters", false);
                    @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
                    @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
                    @await Component.InvokeAsync("VendorNavigation")
                    @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })
                    @await Component.InvokeAsync("PopularProductTags")
                    @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })                                                                                                                                
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
                }
            </div>
        </div>
        <div class="col-md-8 col-lg-9">
            <div class="center-2">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })
                @RenderBody()
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
            </div>
        </div>
    </div>

    @*@await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
        @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })*@
</div>
